# ===================================================================
# CONFIGURATIONS DE PRODUCTION (PROFILE 'prod')
# Ces valeurs surchargeront celles du fichier par défaut.
# ===================================================================

# --- Configuration Serveur (Render) ---
# Render fournit le port via la variable d'environnement PORT,
# Spring Boot le détecte automatiquement, donc pas besoin de le définir ici.

# --- Base de données de Production (PostgreSQL sur Render) ---
# Render fournit une variable d'environnement DATABASE_URL.
# Spring Boot la détecte et configure automatiquement la connexion.
# On a juste besoin de spécifier le driver et d'ajuster quelques options.
spring.datasource.driver-class-name=org.postgresql.Driver
spring.jpa.properties.hibernate.dialect=org.hibernate.dialect.PostgreSQLDialect

# ddl-auto=validate est plus sûr pour la prod. Il vérifie que le schéma correspond
# aux entités sans essayer de le modifier. Utilisez 'update' pour la première migration.
spring.jpa.hibernate.ddl-auto=update

# --- Configuration du stockage (Render utilise un disque persistant) ---
# Le chemin sera monté à /var/data/uploads sur Render
app.file.upload-dir=/var/data/uploads

# --- Les valeurs suivantes DOIVENT être définies comme VARIABLES D'ENVIRONNEMENT sur Render ---
spring.datasource.url=${DATABASE_URL} # (Déjà géré par Spring)
spring.datasource.username=${DB_USER} # (Extrait de DATABASE_URL)
spring.datasource.password=${DB_PASSWORD} # (Extrait de DATABASE_URL)
app.base-url=${APP_BASE_URL}
jwt.secret=${JWT_SECRET_KEY}
spring.mail.username=${MAIL_USERNAME}
spring.mail.password=${MAIL_PASSWORD}
cors.allowed-origins=${CORS_ALLOWED_ORIGINS}